let puppeteer = require("puppeteer");
let url       = require("url");
let nconf     = require("nconf");
let keygrip   = require("keygrip");
let dbProm    = require("./db")("upd8t0r");

nconf.argv().env();

let uHost  = nconf.get("updator") || "localhost:23456"
let sHost  = nconf.get("samoa") || "localhost:12345"
let uSec   = nconf.get("updatesecret");
let sSec   = nconf.get("oauthsecret");
let chrome = nconf.get("chrome");

let chromeOpts = chrome ? { executablePath: chrome } : {}

let updateValue = {
	username: null,
	token: null,
	user: {
		name: "admin",
		email: "theonewhogivesflags@upd8t0r.online",
		color: nconf.get("flag") || "pctf{If you see this bug @zwad3}",
		food: "Lion Stew",
	}
}

let samoaValue = {
	id: {
		name: "sorryNotAdmin",
		email: "the.admin.is.only.signed.into.upd8t0r@samoauth.site",
		food: "none",
		color: "none",
	}
}

let updatesession = Buffer.from(JSON.stringify(updateValue)).toString("base64");
let keyobj = new keygrip([uSec]);
let sig = keyobj.sign(`updatesession=${updatesession}`);

let session = Buffer.from(JSON.stringify(samoaValue)).toString("base64");
let sKeyobj = new keygrip([sSec]);
let sessionsig = sKeyobj.sign(`session=${session}`);

let sleep = time => new Promise(resolve => setTimeout(resolve, time));

let visitPage = async (page) => { 
	let resource = url.parse(page);

	if (resource.host !== uHost) {
		console.log({ error: `Will only visit ${host}` });
		return;
	}

	const browser = await puppeteer.launch(chromeOpts);
	const pageElt = await browser.newPage();

	let interrupt = sleep(5000).then(browser.close)

	let allSteps = async () => {
		await pageElt.authenticate({username: "admin", password: "superdupersecret"});

		await pageElt.setCookie({
			name: "updatesession",
			value: updatesession,
			domain: uHost,
		}, {
			name: "updatesession.sig",
			value: sig,
			domain: uHost,
		})

		await pageElt.setCookie({
			name: 'session',
			value: session,
			domain: sHost, 
		}, {
			name: "session.sig",
			value: sessionsig,
			domain: sHost,
		})

		await pageElt.goto(page);
		await sleep(3000);
		return browser.close();
	}

	return Promise.race([interrupt, allSteps()]);
}

let getEntry = async () => {
	let db = await dbProm;
	let rec = async () => {
		let result = await db.xss.find({ $query: {}, $orderby: {date: -1}, $limit: 1 }).toArray();
		if (result.length === 0) {
			await sleep(500);
			return rec();
		}
		let [{ url, _id }] = result;
		await db.xss.remove({ _id });
		console.log(`Visiting ${url}`);
		await visitPage(url);
		return rec();
	}
	return rec();
}

getEntry()

