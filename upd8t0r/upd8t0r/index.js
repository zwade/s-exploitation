let dbPromise     = require("./db")("upd8t0r");
let content       = require("./content");
let express       = require("express");
let bodyParser    = require("body-parser");
let cookieSession = require("cookie-session");
let crypto        = require("crypto");
let fs            = require("mz/fs");
let nconf         = require("nconf");
let uuid          = require("uuid/v4");
let Recaptcha     = require('express-recaptcha').Recaptcha;
let { join }      = require("path");
let { inspect }   = require("util");
let seedrandom    = require("seedrandom");

let parser        = require("../native-sexp.node");


nconf.argv().env();

let flag = nconf.get("flag") || "PCTF{THIS_IS_A_DUMMY_FLAG_IF_YOU_TRY_TO_SUBMIT_FOR_POINTS_YOU_WILL_BE_ğŸ’”}";
let samoa = nconf.get("samoa") || "localhost:12345"
let updator = nconf.get("updator") || "localhost:23456"

let start = async () => {

	
	let db = await dbPromise();
	let publicKey = await fs.readFile(join(__dirname, "keys", "id_rsa.pub"));
	publicKey = publicKey.toString();

	let app = express();

	if (nconf.get("TESTING")) {
		let eba = require("express-basic-auth");
		app.use(eba({
			users: 
				{ admin: 'superdupersecret'},
			challenge: true
		}))
	}

	let decodeSexp = (string) => {
		let obj;
		try {
			obj = parser.parse(string);
		} catch (e) {
			console.log(e);
			return null;
		}


		if (obj.length === 2 && obj[0] === "error") {
			console.error(`Error: ${obj[1]}`);
			return null;
		}

		let res = {};
		for (let [key, value] of obj) res[key] = value;
		return res;
	}

	let generatePost = async ({ title, body, visible, date, template }) => {
		let id = uuid();
		await db.posts.insert({
			title,
			body,
			visible,
			date,
			template,
			id
		})
		return id
	}

	let urandom = async () => {
		let fd = await fs.open("/dev/urandom", "r");
		let n = 64;
		let buff = Buffer.alloc(n);
		await fs.read(fd, buff, 0, n, 0);
		await fs.close(fd);
		return buff.toString();
	}

	let randomString = () => {
		let n = 64;

		let out = new Buffer(n);
		for (let i = 0; i < n; i++) {
			let r = Math.random.int32();
			out[i] = (r % 256);
		}
		return out.toString("base64");
	}

	let dynamicContent = async (res, f) => {
		let nonce = randomString();
		res.set("Content-Security-Policy",
				`default-src 'self'; script-src 'nonce-${nonce}' 'unsafe-eval'; style-src 'self' https://fonts.googleapis.com/; font-src *`);
		try {
			await f(nonce);
		} catch (e) {
			res.status(503);
			res.send("Fatal Error");
		}
	}

	let staticContent = async (res, f) => {
		res.set("Content-Security-Policy",
				"default-src 'self'; script-src 'none'; style-src 'self' https://fonts.googleapis.com/; font-src *");
		try {
			await f();
		} catch (e) {
			res.status(503);
			res.send("Fatal Error");
		}
	}

	let seed = await urandom();
	seedrandom(seed, { global: true });

	app.use(bodyParser.urlencoded());
	app.use(cookieSession({
		name: "updatesession",
		secret: nconf.get("secret") || "testing",
		httpOnly: false,
	}))

	app.use("/", async (req, res, next) => {
		let randomness = await urandom();
		Math.seedrandom(seed, {entropy: true});
		next();
	})
	app.use("/", (req, res, next) => {
		res.set("Access-Control-Allow-Origin", `http://${samoa}`);
		res.set("Vary", "Origin");
		next();
	})
	app.use("/files", express.static(__dirname));

	app.get("/", async (req, res) => {
		dynamicContent(res, async (nonce) => {
			let path = join(__dirname, "client", "index.html");
			let file = await fs.readFile(path);
			file = file.toString().replace(/\{\{nonce\}\}/g, nonce);
			res.send(file);
		})
	})

	app.get("/posts", (req, res) => {
		let getPosts = () => db.posts.find({visible: true}).sort({date: -1}).toArray()
			.then(data => {
				if (data.length == 0) {
					return Promise.all(content.map(v => generatePost(v)))
						.then(getPosts)
				}
				return data
			})
		getPosts().then(data => {
			res.send(data)
		})
	})

	app.get("/posts/:UID", async (req, res) => {
		let data = await db.posts.find({id: req.params.UID}).toArray();
		if (data.length == 0) {
			res.status(404)
			// ğŸ˜…
			res.send("404 Page not found ğŸ˜±ğŸ˜±ğŸ˜±ğŸ˜±ğŸ˜±ğŸ’”ğŸ˜¤")
			return;
		}
		let [{ title, body, date, template }] = data;
		body = body.replace(/\{\{([^\}]+)\}\}/g, (comp) => {
			comp = comp.slice(2,-2);
			let [cmd, ...opts] = comp.split(":");
			switch(cmd) {
				case "link": {
					return `<a href="${opts[1]}">${opts[0]}</a>`;
				}
				case "flag": {
					return flag
				}
			}
		})

		staticContent(res, async () => {
			let path = join(__dirname, "templates", template);
			if (path.slice(0, 4) !== "/app") {
				res.send("Invalid template");
				return;
			}
			let templateContent = await fs.readFile(path);
			templateContent = templateContent.toString('latin1');
			templateContent = templateContent.replace(/\{\{title\}\}/g, title);
			templateContent = templateContent.replace(/\{\{body\}\}/g, body);
			res.send(templateContent);
		})
	})

	app.get("/samoa", (req, res) => {
		let opts;
		if (req.query.opts && Array.isArray(req.query.opts)) {
			opts = req.query.opts;
		} else {
			opts = ["color", "food"];
		}
		optString = (opts.map(s => `${s}=true`)).join("&");
		res.redirect(`http://${samoa}/auth?redirect=http://${updator}/login&user=Upd8t0r&${optString}`)
	})

	app.get("/login", async (req, res) => {
		let [encToken, signature] = req.query.token.split(".");
		let verifier = crypto.createVerify("SHA256");
		let token = Buffer.from(encToken, "base64").toString();

		verifier.update(token);

		let verification = verifier.verify(publicKey, signature, "base64");
		if (!verification) {
			res.status(401);
			res.send("Unable to verify oauth token");
			return;
		}

		let usernameMatch = (/\(name "(([^\\"]*(\\.)*)+)"\)/).exec(token);

		if (usernameMatch === null) {
			res.status(401);
			res.send("Invalid oauth token");
			return;
		}

		let username = usernameMatch[1];
		req.session.username = username;
		req.session.token = token;

		staticContent(res, async () => {
			let user = await db.users.find({username}).toArray(); 
			let template;
			if (user.length === 0) {
				template = await fs.readFile(join(__dirname, "templates", "register.html"));
			} else {
				template = await fs.readFile(join(__dirname, "templates", "login.html"));
			}
			template = template.toString();
			template = template.replace(/\{\{username\}\}/g, username);

			res.send(template);
		})
	})

	app.post("/register", async (req, res) => {
		if (!req.body.password || !req.session || !req.session.token || !req.session.username) {
			res.status("401");
			res.send("Missing Form Data");
			return;
		}

		let hash = crypto.createHash("sha256");
		hash.update(req.body.password);
		let hashedPass = hash.digest("hex");
		let username = req.session.username; 
		let contents = await db.users.find({ username }).toArray();
		if (contents.length > 0) {
			res.status(401);
			res.send("User already exists");
			return;
		}

		await db.users.insert({ username, hashedPass });
		let user = decodeSexp(req.session.token);
		if (user !== null) {
			req.session.user = user;
		}

		req.session.username = null;
		req.session.token = null;

		dynamicContent(res, async (nonce) => {
			let template = await fs.readFile(join(__dirname, "templates", "welcome.html"));
			template = template.toString().replace(/\{\{nonce\}\}/, nonce);
			template = template.replace(/\{\{name\}\}/, username);
			res.send(template);
		})
	})

	app.post("/login", async (req, res) => {
		if (!req.body.password || !req.session.username) {
			res.status("401");
			res.send("Missing Form Data");
			return;
		}

		let hash = crypto.createHash("sha256");
		hash.update(req.body.password);
		let hashedPass = hash.digest("hex");
		let username = req.session.username; 
		let contents = await db.users.find({ username, hashedPass }).toArray();
		if (contents.length === 0) {
			res.status(401);
			res.send("Unable to authenticate");
			return;
		}

		let user = decodeSexp(req.session.token);
		if (user !== null) {
			req.session.user = user;
		}

		req.session.username = null;
		req.session.token = null;

		dynamicContent(res, async (nonce) => {
			let template = await fs.readFile(join(__dirname, "templates", "welcome.html"));
			template = template.toString().replace(/\{\{nonce\}\}/, nonce);
			template = template.replace(/\{\{name\}\}/, username);
			res.send(template);
		})
	})

	app.get("/admin", async (req, res) => {
		if (!req.session || !req.session.user || req.session.user.name !== "admin") {
			res.status(403);
			res.send("You are not an admin. Shoo, shoo");
			return;
		}

		staticContent(res, async () => {
			let template = await fs.readFile(join(__dirname, "templates", "admin.html"));
			res.send(template.toString());
		})
	})

	app.post("/admin", async(req, res) => {
		if (!req.session || !req.session.user || req.session.user.name !== "admin") {
			res.status(403);
			res.send("Seriously! YOU ARE NOT AN ADMIN. *sigh*");
			return;
		}
		if (!req.body.title || !req.body.template || !req.body.title) {
			console.log(req.body);
			res.status(401);
			res.send("Missing Form Data");
			return;
		}
		
		let { body, template, title } = req.body;

		let id = await generatePost({
			body,
			title,
			template,
			date : new Date(),
			visible : false
		})

		res.redirect(`/posts/${id}`);
	})

	app.get("/bookmark", async(req, res) => {
		if (!req.session.user || req.session.user.name !== "admin") {
			res.status(403);
			res.send("Sorry, this is an admin feature only");
			return;
		}

		staticContent(res, async () => {
			let template = await fs.readFile(join(__dirname, "templates", "bookmark.html"));
			res.send(template.toString());
		})
	})

	app.post("/bookmark", async(req, res) => {
		if (!req.session.user || req.session.user.name !== "admin") {
			res.status(403);
			res.send("Sorry, this is an admin feature only");
			return;
		}

		if (!req.body.url) {
			res.status(401);
			res.send("Missing Form Data");
			return;
		}

		await db.xss.insert({
			url : req.body.url,
			date: new Date(),
		})

		res.redirect("/")
	})

	
	app.listen(23456, "0.0.0.0", () => 
		console.log(`Listening on 0.0.0.0:23456`))

}

start()
